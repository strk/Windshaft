#!/bin/sh

# This is where postgresql connection parameters are read from
TESTENV=../config/environments/test

# Extract postgres configuration

pgUSER=`node -e "console.log(require('${TESTENV}').postgres.user || '')"`
if [ -n "${pgUSER}" ]; then
  export PGUSER=${pgUSER}
  echo "PGUSER: [$PGUSER]"
fi

pgHOST=`node -e "console.log(require('${TESTENV}').postgres.host || '')"`
if [ -n "${pgHOST}" ]; then
  export PGHOST=${pgHOST}
  echo "PGHOST: [$PGHOST]"
fi

pgPORT=`node -e "console.log(require('${TESTENV}').postgres.port || '')"`
if [ -n "${pgPORT}" ]; then
  export PGPORT=${pgPORT}
  echo "PGPORT: [$PGPORT]"
fi

die() {
        msg=$1
        echo "${msg}" >&2
        exit 1
}

echo "...Configuring Windshaft test database"

echo "...Recreating windshaft_test database"
dropdb windshaft_test | 2>&1
createdb -EUTF8 windshaft_test || die "Could not create test database"
psql -c 'create extension postgis' windshaft_test ||
  die "Could not install postgis in test database"
dropdb windshaft_test2 | 2>&1
createdb -T windshaft_test -E UTF8 windshaft_test2 || die "Could not create test database 2"

echo "...Populating windshaft_test database with test data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/windshaft.test.sql ||
  die "Cound not populate test database"

echo "...Populating windshaft_test database with reduced populated places data"
psql --set ON_ERROR_STOP=1 -d windshaft_test -f ./fixtures/populated_places_simple_reduced.sql ||
  die "Cound not populate test database"

echo "...Test database configuration complete"
